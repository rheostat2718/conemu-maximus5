There is an easy way to control (a little) !ConEmu window from console applications or additional hotkeys.
It's a !GuiMacro.

===Abstract===
You can execute !ConEmu GUI macro from:
  * !ConEmu hotkey - set up «Macro 01» … «Macro 32» on «Keys» page of «Settings» dialog.
  * command line (or batch file), i.e.:
{{{
"%ConEmuBaseDir%\ConEmuC.exe" /GUIMACRO WindowMinimize
}}}
  * ANSI X3.64 OSC code, i.e.:
{{{
rem Replace «^e» with real ESC code (symbol with ASCII \x1B)
echo ^e]9;6;"IsConEmu"^e\
if "%ConEmuMacroResult%"=="Yes" echo ConEmu found!
}}}
  * via Far Manager plugin (Far1/Far2/Far3 are supported):
{{{
F11 -> ConEmu -> Execute ConEmu macro
}}}
  * you can use Far Manager macros to forward commands for !ConEmu GUI.
    * *Far2*: callplugin(0x43454D55,"!IsConEmu()")
    * *Far3*: Plugin.Call("4b675d80-1d4a-4ea9-8436-fdc23f2fc14b","!IsConEmu()"), _callplugin is alias of Plugin.Call_


===Command line behaviour===
When GUI macro executed successfully, ConEmuC.exe set errorlevel to 0 and write result to !StdOut.

===Far plugin behaviour===
When you call plugin menu, result is show in the dialog field,

When you use far manager macro - result is placed to the '!ConEmuMacroResult' environment variable.

===List of functions===
<wiki:comment> !!! when modifying - add same functions to "src\ConEmu\About.h" !!! </wiki:comment>
{{{
    Close(<What>[,<Flags>])
      - Close current console (0), without confirmation (0,1),
        terminate active process (1), without confirmation (1,1)
        close ConEmu window (2)
        close active tab (3)
        close active group (4)
        close all tabs but active (5)
    Copy(<What>)
      - Copy active console contents
        What==0: current selection
        What==1: all buffer contents
    FindEditor("<FullEditFileName>"),
    FindViewer("<FullViewerFileName>"),
    FindFarWindow(<WindowType>,"<WindowTitle>")
     - Returns "Found:<index of RealConsole>", "Active:<Far window number>", "Blocked", or "NotFound"
       <WindowType> is number from Far Manager enum WINDOWINFO_TYPE
    FontSetName("<FontFaceName>"[,FontHeight[,FontWidth]])
     - Change font face name and (optionally) height/width.
    FontSetSize(Relative,N)
     - Change font height in the ConEmu window
       Relative==0: N - required font height in points
       Relative==1: N (+-1, +-2) - increase/decrease font height
       returns - "OK", or "InvalidArg"
    IsConEmu
     - Returns "Yes" when console was started under !ConEmu
    IsConsoleActive
     - Check, is RealConsole active or not, "Yes"/"No"
    IsRealVisible
     - Check, is RealConsole visible or not, "Yes"/"No"
    MsgBox("<Text>","<Title>",<ButtonType>)
     - Show modal GUI MessageBox, returns clicked button name
       ("Ok", "Cancel", "Retry", etc.),
       ButtonType (number) is from Windows SDK.
    Paste(<Cmd>[,"<Text>"])
     - When <Text> is omitted - paste from Windows clipboard,
       otherwise - paste specified text
       Cmd==0: paste all lines
       Cmd==1: paste first line
       Cmd==2: paste all lines, without confirmations
       Cmd==3: paste first line, without confirmations
       Cmd==4: select and parse file pathname, Text - default
       Cmd==5: select and parse folder pathname, Text - default
       Cmd==6: select and parse cygwin file pathname, Text - default
       Cmd==7: select and parse cygwin folder pathname, Text - default
       Cmd==8: paste path from clipboard converted to CygWin style
    Print(["<Text>"])
     - Alias for Paste(2,"<Text>")
    Progress(<Type>[,<Value>])
     - Set progress state on taskbar and !ConEmu title
       Type=0: remove progress
       Type=1: set progress value to <Value> (0-100)
       Type=2: set error state in progress
    Rename(<Type>,["<Title>"])
      - Rename tab (Type=0) or console title (Type=1)
    SetOption("<Name>",<Value>)
      - Name=one of allowed for changing ConEmu options
        "QuakeAutoHide": auto hide on focus lose, Quake mode
          Value: 2 - switch auto-hide, 1 - enable, 0 - disable
        "bgImageDarker": darkening of background image
          Value: 0 .. 255
    Shell("<Verb>","<File>"[,"<Parms>"[,"<Dir>"[,<ShowCmd>]]])
     - Verb can be "open", "print" and so on, or special value "new_console",
       which starts File in the new tab of ConEmu window. Examples:
         Shell("open","cmd.exe","/k")
         Shell("","","cmd.exe /k -new_console:b"),
         Shell("new_console:b","","cmd.exe /k")
         Shell("new_console:sV")
         Shell("new_console:Ibn","cmd","/k start explorer \"%CD%\" && exit")
    Split(<Cmd>,<Horz>,<Vert>)
     - Cmd=0, Horz=1..99, Vert=0: Duplicate active «shell» split to right, same as Shell("new_console:s50Hn")
       Cmd=0, Horz=0, Vert=1..99: Duplicate active «shell» split to bottom, same as Shell("new_console:s50Vn")
       Cmd=1, Horz=-1..1, Vert=-1..1: Move splitter between panes (aka resize panes)
       Cmd=2, Horz=-1..1, Vert=-1..1: Put cursor to the nearest pane (preferred direction may be choosed).
    Status(0[,<Parm>])
     - Show/Hide status bar, Parm=1 - Show, Parm=2 - Hide
    Status(1[,"<Text>"])
     - Set status bar text
    Tab(<Cmd>[,<Parm>])
     - Control ConEmu tabs
       Cmd==0 - show/hide tabs
       Cmd==1 - commit lazy changes
       Cmd==2 - switch next (eq. CtrlTab)
       Cmd==3 - switch prev (eq. CtrlShiftTab)
       Cmd==4 - switch tab direct (no recent mode), Parm=(1,-1)
       Cmd==5 - switch tab recent, Parm=(1,-1)
       Cmd==6 - switch console direct (no recent mode), Parm=(1,-1)
       Cmd==7 - activate console by number, Parm=(1-based console index)
       Cmd==8 - show tabs list menu (indiffirent Far/Not Far)
       Cmd==9: close active tab, same as Close(3)
       Cmd==10: switches visible split-panes, Parm=(1,-1)
    Task(Index[,"Dir"])
     - start task with 1-based index
    Task("Name"[,"Dir"])
     - start task with specified name
    WindowFullscreen()
     - Switch fullscreen window mode
       returns previous window mode
    WindowMaximize()
     - Switch maximized window mode
       returns previous window mode
    WindowMinimize() or WindowMinimize(1)
     - Minimize ConEmu window ("1" means "minimize to the TSA")
    WindowMode([\"<Mode>\"])
     - Returns or set current window mode
       "NOR", "MAX", "FS" (fullscreen), "MIN", "TSA"
       "TLEFT", "TRIGHT" (tile to left/right), "THEIGHT",
       "MPREF", "MNEXT" (move ConEmu to prev/next monitor)
}}}

===Examples===
====Far2====
{{{
$if (callplugin(0x43454D55,"IsConEmu()")!=0 && env("ConEmuMacroResult")=="Yes")
  MsgBox("Macro", "Far started under ConEmu")
$end
}}}
====Far3====
{{{
$if (callplugin("4b675d80-1d4a-4ea9-8436-fdc23f2fc14b","IsConEmu()")!=0 && env("ConEmuMacroResult")=="Yes")
  MsgBox("Macro", "Far started under ConEmu")
$end
}}}
{{{
callplugin("4b675d80-1d4a-4ea9-8436-fdc23f2fc14b","shell(\"open\",\""+env("FARHOME")+"\\Encyclopedia\\FarEncyclopedia.ru.chm\")")
}}}
{{{
callplugin("4b675d80-1d4a-4ea9-8436-fdc23f2fc14b","shell(\"new_console\",\""+env("FARHOME")+"\\far.exe\")")
}}}
====Far1====
This is most complicated, cause of 'callplugin' absence in the Far 1.x
{{{
F11
$if (menu.Select("ConEmu",2)<=0) MsgBox("ConEmu","Plugin was not found in list!",1)
  $Exit
$end
Enter %r="";
$if (menu.select("~.",1)>0)
  ~ $Text "IsConEmu()" Enter %r=Dlg.GetValue(5,0);
$end
Esc
$if (%r=="Yes")
  MsgBox("Macro", "Far started under ConEmu")
$end
}}}

