#The following variables can be set by the user:
#
#NAME - the name of the plugin (project name|dll name).
#
#EXT - extension of the plugin executable (dll by default).
#
#DOCS - a list of additional files that need to copied to the target folder.
#
#ADDOUTDIR - you can set it to /dir if the target folder for the plugin
#            is a folder inside the default target folder.
#            This is used in multiarc for building *.fmt.
#
#USERCPP - user defined switches for the compiler (added after the default
#          ones).
#
#CPP_UNALIGN - use 1byte alignment insead of 8bytes in 32bit compiling
#
#ADDOBJDIR - you can set it to /dir if the temporary folder for the plugin
#            compiled files is a folder inside the default temporary folder.
#            This is used in ftp for building *.fll.
#
#DEF_NAME - name of DEF-file (maybe with path, but always without extension).
#           If unspecifiedn used $(NAME).
#           This is used in ftp for building *.fll.
#
#RC_NAME  - name of RC-file (maybe with path, but always without extension).
#           If unspecifiedn used $(NAME).
#           This is used in ftp for building *.fll.
#
#LINK_OBJS - a list of target *.obj files
#
#LINK_DEP - additional dependents for link rule (e.g. prebuild library)
#
#DEBUG - set if a debug build is needed
#
#WIDE - set for a unicode build
#
#ULINK - set if you want to use ulink for linking
#
#NEEDENTRY - set if you want to disable the /noentry link flag
#
#NEEDDEFLIB - set if you want to disable the /nodefaultlib link flag
#
#EXCLUDECRT - set if you do not want to link with common/crt lib.
#
#AMD64 - set for x64 build
#  or
#CPU=AMD64 - for x64 build
#
#IA64 - set for IA64 build
#  or
#CPU=IA64 - for IA64 build
#
#VC8 - set to build with VC8, VC9 intended by default
#


!if exists(../make_vc_defs)
!include ../make_vc_defs
!endif

DEF_NAME = export

NEEDENTRY = 1

!if defined(AMD64) || "$(CPU)" == "AMD64"
OUTNAME = ConEmuHk64
RCWIN64=/D_WIN64 /DWIN64
!else
OUTNAME = ConEmuHk
RCWIN64=
!endif

#!ifdef DEBUG
#OUTNAME = ConEmuHk
#!endif

NAME = ConEmuHk

LINK_OBJS = \
$(OBJDIR)\Entry.obj \
$(OBJDIR)\Common.obj

USERLIBS = 


!if defined(AMD64) || "$(CPU)" == "AMD64"
!undef AMD64
!undef CPU
AMD64=1
CPU=AMD64
!elseif defined(IA64) || "$(CPU)" == "IA64"
!undef IA64
!undef CPU
IA64=1
CPU=IA64
!endif

!ifndef RC_NAME
RC_NAME=$(NAME)
!endif

!ifndef DEF_NAME
DEF_NAME=$(NAME)
!endif

!ifndef DEBUG
DIRNAME=final
!else
DIRNAME=debug
!endif                   

!ifdef WIDE
DIRSUFF = W
!endif


RELEASEDIR=\Release\ConEmu

!ifdef AMD64
DIRBIT = 64
!else
DIRBIT = 32
!endif
WORKDIR = $(DIRNAME).$(DIRBIT)$(DIRSUFF).vc
!ifndef OUTDIR
!ifdef INSTALL
OUTDIR=$(INSTALL)
!else
OUTDIR=$(WORKDIR)
!endif
!endif


OBJDIR = $(WORKDIR)\obj$(ADDOBJDIR)
#COMMON = ..
COMINC = ..
CPP_WIDE = /DUNICODE /D_UNICODE
RC_WIDE = /dUNICODE
EXT = dll
DLLNAME = $(OUTNAME).$(EXT)
DLLFULLNAME = $(OUTDIR)$(ADDOUTDIR)\$(DLLNAME)
DEF = $(DEF_NAME).def
MAP = $(OUTDIR)$(ADDOUTDIR)\$(OUTNAME).map
RES = $(OBJDIR)\$(NAME).res

!ifdef VC8
COMPAT64=/Wp64
NOWIN98=/OPT:NOWIN98
!endif

PDBNAME="$(OUTDIR)$(ADDOUTDIR)\$(OUTNAME).pdb"
!ifndef DEBUG
CPP_OPT=/DNDEBUG /O1i /Fd$(PDBNAME) /DHIDE_TODO /DCRTSTARTUP
!else
CPP_OPT=/DDEBUG /Od /Zi /Fd$(PDBNAME) /DCRTSTARTUP
!endif

!ifdef AMD64
COMMONLIB = ../common/libCRT64.lib
CPP_PROJ_NO=/nologo /c /W3 /Gy /GF /Zp8 /J $(COMPAT64) /GS- /Gr /GR- /EHs-c- /LD /I"$(COMINC)" $(ENV_INC_OPT) $(CPP_WIDE) /D_CRT_SECURE_NO_WARNINGS /D_CRT_NONSTDC_NO_WARNINGS /D_CRT_NON_CONFORMING_SWPRINTFS /D_WIN32_WINNT=0x0500 $(USERCPP)
ULOUT=-Tpd+
LINK_MACHINE = /MACHINE:X64
!elseif defined(IA64)
COMMONLIB = ../common/libCRTIA64.lib
CPP_PROJ_NO=/nologo /c /W3 /Gy /GF /Zp8 /J $(COMPAT64) /GS- /Gr /GR- /EHs-c- /LD /I"$(COMINC)" $(ENV_INC_OPT) $(CPP_WIDE) /D_CRT_SECURE_NO_WARNINGS /D_CRT_NONSTDC_NO_WARNINGS /D_CRT_NON_CONFORMING_SWPRINTFS /D_WIN32_WINNT=0x0500 $(USERCPP)
ULOUT=-Tpd+
LINK_MACHINE = /MACHINE:X64
!else
COMMONLIB = ../common/libCRT.lib
#../pvdCRT.lib
!ifdef CPP_UNALIGN
CPP_ALIGN=/Zp1
!endif
# /I"$(COMMON)"
CPP_PROJ_NO=/nologo /c /W3 /Gy /GF $(CPP_ALIGN) /J /Gr /GS- /GR- /EHs-c- /LD /I"$(COMINC)" $(ENV_INC_OPT) $(CPP_WIDE) /D_CRT_SECURE_NO_WARNINGS /D_CRT_NONSTDC_NO_WARNINGS /D_CRT_NON_CONFORMING_SWPRINTFS /D_WIN32_WINNT=0x0500 $(USERCPP)
ULOUT=-Tpd -Re
LINK_MACHINE = /MACHINE:X86
!endif
CPP_PROJ=$(CPP_PROJ_NO) /Fo"$(OBJDIR)\\"

#!ifdef EXCLUDECRT
#!undef COMMONLIB
#!endif
LIBS = $(COMMONLIB) chkstk.obj kernel32.lib user32.lib gdi32.lib advapi32.lib shell32.lib ole32.lib uuid.lib mpr.lib version.lib oleaut32.lib wbemuuid.lib $(USERLIBS)

!ifdef _BIN_PATH_
!ifndef _CL_PATH_
_CL_PATH_=$(_BIN_PATH_)
!endif
!ifndef _RC_PATH_
_RC_PATH_=$(_BIN_PATH_)
!endif
!ifndef _LINK_PATH_
_LINK_PATH_=$(_BIN_PATH_)
!endif
!endif


LNK=$(_LINK_PATH_)link.exe

!ifndef DEBUG
LINK_DEBUG=/map:"$(MAP)"
CPP_DEBUG=
!else
LINK_DEBUG=/debug /pdb:$(PDBNAME) /map:"$(MAP)"
CPP_DEBUG=/Zi
!endif

!ifndef NEEDDEFLIB
NODEFLIB = /nodefaultlib
!endif
LINK_FLAGS=/nologo /dll /release /merge:.rdata=.text $(LINK_MACHINE) $(NOWIN98) $(NODEFLIB) $(ENV_LIB_OPT) /def:"$(DEF)" /out:"$(DLLFULLNAME)" $(LINK_DEBUG)


CFLAGS_NO = $(MP) $(CPP_PROJ_NO) $(CPP_DEBUG) $(CPP_OPT)
CFLAGS = $(MP) $(CPP_PROJ) $(CPP_DEBUG) $(CPP_OPT)

!ifndef CC
CC=$(_CL_PATH_)cl.exe
!endif

!ifndef LIBR
LIBR=$(_LINK_PATH_)lib.exe
!endif

!ifndef RC
RC=$(_RC_PATH)rc.exe
!endif

!if !defined(SRC_PATHS_DEFINED) && defined(__MAKE__)
SRC_PATHS=.;..\common
.path.cpp=$(SRC_PATHS)
.path.c=$(SRC_PATHS)
.path.hpp=$(SRC_PATHS)
.path.h=$(SRC_PATHS)
.path.rc=$(SRC_PATHS)
.path.def=$(SRC_PATHS)
!endif

ALL: dirs $(INSTALL) $(DLLFULLNAME) clean

$(DLLFULLNAME) : $(LINK_OBJS) $(RES) $(LINK_DEP)
!ifndef __MAKE__
	@$(LNK) @<<
	$(LINK_FLAGS) $(LIBS) $(LINK_OBJS) $(RES)
<<
!else
	@$(LNK) $(LINK_FLAGS) $(LIBS) $(LINK_OBJS) $(RES)
!endif
!ifdef DOCS
!ifndef WIDE
!ifndef __MAKE__
	@for %%i in ($(DOCS)) do @copy /Y %%i $(OUTDIR)$(ADDOUTDIR) > nul 2> nul
!else
	@for %i in ($(DOCS)) do @copy /Y %i $(OUTDIR)$(ADDOUTDIR) > nul 2> nul
!endif
!else
	@$(COMMON)\convert.exe $(DOCS) $(OUTDIR)$(ADDOUTDIR)
!endif
!endif

!ifndef __MAKE__
.cpp{$(OBJDIR)}.obj::
	@$(CC) @<<
	$(CFLAGS) $<
<<
{../common/}.cpp{$(OBJDIR)}.obj::
	$(CC) @<<
	$(CFLAGS) $<
<<
!else
.cpp{$(OBJDIR)}.obj:
	@$(CC) $(CFLAGS) { $< } 

{../common/}.cpp{$(OBJDIR)}.obj:
	@$(CC) $(CFLAGS) { $< } 
!endif

$(RES): $(RC_NAME).rc
	@$(RC) /I"$(COMINC)" $(ENV_INC_OPT) $(RCWIN64) $(RC_WIDE) /fo"$(RES)" $(RC_NAME).rc

.PHONY: dirs
dirs:
!ifdef INSTALL
	@if not exist "$(WORKDIR)\$(NULL)" mkdir "$(WORKDIR)"
!endif
	@if not exist "$(OBJDIR)\$(NULL)" mkdir "$(OBJDIR)"
	@if not exist "$(OUTDIR)\$(NULL)" mkdir "$(OUTDIR)"
	@if not exist "$(OUTDIR)$(ADDOUTDIR)\$(NULL)" mkdir "$(OUTDIR)$(ADDOUTDIR)"

.PHONY: clean
clean:
	@echo copying release files
	@if not exist "..\..$(RELEASEDIR)\$(NULL)" mkdir "..\..$(RELEASEDIR)"
	@echo move $(DLLFULLNAME) ..\..$(RELEASEDIR)\$(OUTNAME).dll
	@move $(DLLFULLNAME) ..\..$(RELEASEDIR)\$(OUTNAME).dll
!ifdef DEBUG
	@echo move $(PDBNAME) ..\..$(RELEASEDIR)\$(OUTNAME).pdb
	@move $(PDBNAME) ..\..$(RELEASEDIR)\$(OUTNAME).pdb
!else
	@if exist $(PDBNAME) del $(PDBNAME)
!endif
	@echo move $(MAP) ..\..$(RELEASEDIR)\$(OUTNAME).map
	@move $(MAP) ..\..$(RELEASEDIR)\$(OUTNAME).map

#	@echo final cleaning
#	@del /Q $(OBJDIR)\*.*
#	@rd $(OBJDIR)
#	@del /Q $(OUTDIR)$(ADDOUTDIR)\*.*
#	@rd $(OUTDIR)$(ADDOUTDIR)


$(OBJDIR)\Entry.obj: Entry.cpp

$(OBJDIR)\Common.obj: ..\common\Common.cpp
